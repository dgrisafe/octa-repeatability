select_1eye %>% left_join(data_octa_global_rename, by = "eyeid") %>% summary()
# data_octa_global_rename_1eye <-
# select a single eye (right or left) per individual
# set the seed so working with a consistent dataset when randomly sampling left or right eye
set.seed(202557943)
# select random 1 eye per person
select_1eye <- data_octa_global_rename %>%
# get 1 eyeid
group_by(ptid, eyeid) %>% sample_n(1) %>% select(ptid, eyeid) %>% ungroup() %>%
# sample 1 eye per individual
group_by(ptid) %>% sample_n(1) %>% ungroup()
# subset just the eyes in the selection above
select_1eye %>% left_join(data_octa_global_rename, by = "eyeid") %>% summary()
# data_octa_global_rename_1eye <-
# select a single eye (right or left) per individual
# set the seed so working with a consistent dataset when randomly sampling left or right eye
set.seed(2025579433)
# select random 1 eye per person
select_1eye <- data_octa_global_rename %>%
# get 1 eyeid
group_by(ptid, eyeid) %>% sample_n(1) %>% select(ptid, eyeid) %>% ungroup() %>%
# sample 1 eye per individual
group_by(ptid) %>% sample_n(1) %>% ungroup()
# subset just the eyes in the selection above
select_1eye %>% left_join(data_octa_global_rename, by = "eyeid") %>% summary()
# data_octa_global_rename_1eye <-
# select a single eye (right or left) per individual
# set the seed so working with a consistent dataset when randomly sampling left or right eye
set.seed(20255794331)
# select a single eye (right or left) per individual
# set the seed so working with a consistent dataset when randomly sampling left or right eye
set.seed(2025579433)
# select random 1 eye per person
select_1eye <- data_octa_global_rename %>%
# get 1 eyeid
group_by(ptid, eyeid) %>% sample_n(1) %>% select(ptid, eyeid) %>% ungroup() %>%
# sample 1 eye per individual
group_by(ptid) %>% sample_n(1) %>% ungroup()
# subset just the eyes in the selection above
select_1eye %>% left_join(data_octa_global_rename, by = "eyeid") %>% summary()
# data_octa_global_rename_1eye <-
# select a single eye (right or left) per individual
# set the seed so working with a consistent dataset when randomly sampling left or right eye
set.seed(20255794331)
# select a single eye (right or left) per individual
# set the seed so working with a consistent dataset when randomly sampling left or right eye
set.seed(1)
# select random 1 eye per person
select_1eye <- data_octa_global_rename %>%
# get 1 eyeid
group_by(ptid, eyeid) %>% sample_n(1) %>% select(ptid, eyeid) %>% ungroup() %>%
# sample 1 eye per individual
group_by(ptid) %>% sample_n(1) %>% ungroup()
# subset just the eyes in the selection above
select_1eye %>% left_join(data_octa_global_rename, by = "eyeid") %>% summary()
# data_octa_global_rename_1eye <-
# select a single eye (right or left) per individual
# set the seed so working with a consistent dataset when randomly sampling left or right eye
set.seed(2)
# select random 1 eye per person
select_1eye <- data_octa_global_rename %>%
# get 1 eyeid
group_by(ptid, eyeid) %>% sample_n(1) %>% select(ptid, eyeid) %>% ungroup() %>%
# sample 1 eye per individual
group_by(ptid) %>% sample_n(1) %>% ungroup()
# subset just the eyes in the selection above
select_1eye %>% left_join(data_octa_global_rename, by = "eyeid") %>% summary()
# data_octa_global_rename_1eye <-
# select a single eye (right or left) per individual
# set the seed so working with a consistent dataset when randomly sampling left or right eye
set.seed(3)
# select random 1 eye per person
select_1eye <- data_octa_global_rename %>%
# get 1 eyeid
group_by(ptid, eyeid) %>% sample_n(1) %>% select(ptid, eyeid) %>% ungroup() %>%
# sample 1 eye per individual
group_by(ptid) %>% sample_n(1) %>% ungroup()
# subset just the eyes in the selection above
select_1eye %>% left_join(data_octa_global_rename, by = "eyeid") %>% summary()
# data_octa_global_rename_1eye <-
# select a single eye (right or left) per individual
# set the seed so working with a consistent dataset when randomly sampling left or right eye
set.seed(1)
# select random 1 eye per person
select_1eye <- data_octa_global_rename %>%
# get 1 eyeid
group_by(ptid, eyeid) %>% sample_n(1) %>% select(ptid, eyeid) %>% ungroup() %>%
# sample 1 eye per individual
group_by(ptid) %>% sample_n(1) %>% ungroup()
# subset just the eyes in the selection above
select_1eye %>% left_join(data_octa_global_rename, by = "eyeid") %>% summary()
# data_octa_global_rename_1eye <-
# select a single eye (right or left) per individual
# set the seed so working with a consistent dataset when randomly sampling left or right eye
set.seed(12)
# select random 1 eye per person
select_1eye <- data_octa_global_rename %>%
# get 1 eyeid
group_by(ptid, eyeid) %>% sample_n(1) %>% select(ptid, eyeid) %>% ungroup() %>%
# sample 1 eye per individual
group_by(ptid) %>% sample_n(1) %>% ungroup()
# subset just the eyes in the selection above
select_1eye %>% left_join(data_octa_global_rename, by = "eyeid") %>% summary()
# data_octa_global_rename_1eye <-
# select a single eye (right or left) per individual
# set the seed so working with a consistent dataset when randomly sampling left or right eye
set.seed(123)
# select random 1 eye per person
select_1eye <- data_octa_global_rename %>%
# get 1 eyeid
group_by(ptid, eyeid) %>% sample_n(1) %>% select(ptid, eyeid) %>% ungroup() %>%
# sample 1 eye per individual
group_by(ptid) %>% sample_n(1) %>% ungroup()
# subset just the eyes in the selection above
select_1eye %>% left_join(data_octa_global_rename, by = "eyeid") %>% summary()
# data_octa_global_rename_1eye <-
# select a single eye (right or left) per individual
# set the seed so working with a consistent dataset when randomly sampling left or right eye
set.seed(1234)
# select random 1 eye per person
select_1eye <- data_octa_global_rename %>%
# get 1 eyeid
group_by(ptid, eyeid) %>% sample_n(1) %>% select(ptid, eyeid) %>% ungroup() %>%
# sample 1 eye per individual
group_by(ptid) %>% sample_n(1) %>% ungroup()
# subset just the eyes in the selection above
select_1eye %>% left_join(data_octa_global_rename, by = "eyeid") %>% summary()
# data_octa_global_rename_1eye <-
# select a single eye (right or left) per individual
# set the seed so working with a consistent dataset when randomly sampling left or right eye
set.seed(12345)
# select random 1 eye per person
select_1eye <- data_octa_global_rename %>%
# get 1 eyeid
group_by(ptid, eyeid) %>% sample_n(1) %>% select(ptid, eyeid) %>% ungroup() %>%
# sample 1 eye per individual
group_by(ptid) %>% sample_n(1) %>% ungroup()
# subset just the eyes in the selection above
select_1eye %>% left_join(data_octa_global_rename, by = "eyeid") %>% summary()
# data_octa_global_rename_1eye <-
# select a single eye (right or left) per individual
# set the seed so working with a consistent dataset when randomly sampling left or right eye
set.seed(123456)
# select random 1 eye per person
select_1eye <- data_octa_global_rename %>%
# get 1 eyeid
group_by(ptid, eyeid) %>% sample_n(1) %>% select(ptid, eyeid) %>% ungroup() %>%
# sample 1 eye per individual
group_by(ptid) %>% sample_n(1) %>% ungroup()
# subset just the eyes in the selection above
select_1eye %>% left_join(data_octa_global_rename, by = "eyeid") %>% summary()
# data_octa_global_rename_1eye <-
# select a single eye (right or left) per individual
# set the seed so working with a consistent dataset when randomly sampling left or right eye
set.seed(123456)
# select random 1 eye per person
select_1eye <- data_octa_global_rename %>%
# get 1 eyeid
group_by(ptid, eyeid) %>% sample_n(1) %>% select(ptid, eyeid) %>% ungroup() %>%
# sample 1 eye per individual
group_by(ptid) %>% sample_n(1) %>% ungroup() %>% select(eyeid)
# subset just the eyes in the selection above
select_1eye %>% left_join(data_octa_global_rename, by = "eyeid") %>% summary()
# data_octa_global_rename_1eye <-
# select a single eye (right or left) per individual
# function that gets just one eye
get_1eye <- function(df){
# set the seed so working with a consistent dataset when randomly sampling left or right eye
set.seed(123456)
# select random 1 eye per person
select_1eye <- df %>%
# get 1 eyeid
group_by(ptid, eyeid) %>% sample_n(1) %>% select(ptid, eyeid) %>% ungroup() %>%
# sample 1 eye per individual
group_by(ptid) %>% sample_n(1) %>% ungroup() %>% select(eyeid)
# subset just the eyes in the selection above
df %>% left_join(x = select_1eye, by = "eyeid") %>% summary()
}
get_1eye(data_octa_global_rename)
# select a single eye (right or left) per individual
# function that gets just one eye
get_1eye <- function(df){
# set the seed so working with a consistent dataset when randomly sampling left or right eye
set.seed(123456)
# select random 1 eye per person
select_1eye <- df %>%
# get 1 eyeid
group_by(ptid, eyeid) %>% sample_n(1) %>% select(ptid, eyeid) %>% ungroup() %>%
# sample 1 eye per individual
group_by(ptid) %>% sample_n(1) %>% ungroup() %>% select(eyeid)
# subset just the eyes in the selection above
df %>% left_join(x = select_1eye, by = "eyeid") %>% summary()
}
get_1eye(data_octa_global_rename)
get_1eye(data_octa_annual_rename)
# select a single eye (right or left) per individual
# function that gets just one eye
get_1eye <- function(df){
# set the seed so working with a consistent dataset when randomly sampling left or right eye
set.seed(123456)
# select random 1 eye per person
select_1eye <- df %>%
# get 1 eyeid
group_by(ptid, eyeid) %>% sample_n(1) %>% select(ptid, eyeid) %>% ungroup() %>%
# sample 1 eye per individual
group_by(ptid) %>% sample_n(1) %>% ungroup() %>% select(eyeid)
# subset just the eyes in the selection above
df %>% left_join(x = select_1eye, by = "eyeid") %>% summary()
}
get_1eye(data_octa_global_rename)
get_1eye(data_octa_annular_rename)
# select a single eye (right or left) per individual
# function that gets just one eye
get_1eye <- function(df){
# set the seed so working with a consistent dataset when randomly sampling left or right eye
set.seed(123456)
# select random 1 eye per person
select_1eye <- df %>%
# get 1 eyeid
group_by(ptid, eyeid) %>% sample_n(1) %>% select(ptid, eyeid) %>% ungroup() %>%
# sample 1 eye per individual
group_by(ptid) %>% sample_n(1) %>% ungroup() %>% select(eyeid)
# subset just the eyes in the selection above
df %>% left_join(x = select_1eye, by = "eyeid") %>% summary()
}
get_1eye(data_octa_global_rename)
get_1eye(data_octa_annulus_rename)
# Intra-Visit Data: create a dataset that selects only repeat measurements per day
data_octa_global_intra <- data_octa_global_rename %>%
# get 1 eye per person
get_1eye() %>%
# create variable that indicates when there is a repeat measurement on the same day for each eye
add_count(ptid, eye_imaged, exam_date, name = "n_msr_day") %>%
filter(n_msr_day > 1) %>%
# now that all the days with single measurements have been excluded, pick the first date with multiple measurements
group_by(ptid, eye_imaged) %>%
filter(exam_date == min(exam_date)) %>%
# create an indicator variable that shows the order of measurements
mutate(order_obs = seq(n())) %>%
ungroup() %>%
# create an indicator variable that shows the order of measurements
group_by(ptid, eye_imaged) %>%
mutate(order_obs = seq(n())) %>%
ungroup() %>% glimpse
get_1eye(data_octa_global_rename) %>% glimpse
# function that gets just one eye
get_1eye <- function(df){
# set the seed so working with a consistent dataset when randomly sampling left or right eye
set.seed(123456)
# select random 1 eye per person
select_1eye <- df %>%
# get 1 eyeid
group_by(ptid, eyeid) %>% sample_n(1) %>% select(ptid, eyeid) %>% ungroup() %>%
# sample 1 eye per individual
group_by(ptid) %>% sample_n(1) %>% ungroup() %>% select(eyeid)
# subset just the eyes in the selection above
df %>% left_join(x = select_1eye, by = "eyeid") %>% summary()
}
get_1eye(data_octa_global_rename) %>% glimpse
knitr::opts_chunk$set(echo = FALSE)
library(readxl)           # import excel files
library(tidyverse)
library(Hmisc)
library(ICC)              # inter class correlation
library(labelled)         # add variable labels
library(kableExtra)       # HTML tables
library(tableone)         # table 1
library(cowplot)          # makes clean plots, with no distractions
theme_set(theme_cowplot())
library(gridExtra)        # allows grid arangement of dissimilar plots together
library(grid)             # add labels to top of grid.arrange plots
library(lme4)
library(citr)
# function that formats variables appropriately
form_vars <- function(df){
df %>%
select(NameSIDSexEyeRegion, everything()) %>%
mutate(
# match first text (upper or lower case) of any length, followed by any underscore, all repeated any number of times
name = str_extract(string = NameSIDSexEyeRegion, pattern = regex("^[[A-Za-z]*_]+")) %>% str_sub(end = -2),
# matches everything starting with the first number
SIDSexEyeRegion = str_extract(string = NameSIDSexEyeRegion, pattern = regex("[[0-9]*].*$"))
) %>%
# separate the remaining variables
separate(
col = SIDSexEyeRegion, sep = "_", remove = TRUE,
into = c("ptid", "sex", "image_area", "image_method", "image_size", "exam_date", "exam_time", "eye_imaged")
) %>%
# filter blank rows
filter(!is.na(exam_date)) %>%
# format variables appropriately
mutate(
time_stamp = paste(exam_date, exam_time) %>% as.POSIXct(format = "%m%d%Y %H%M%S"),
exam_date = exam_date %>% as.Date(format = "%m%d%Y"),
eye_imaged = case_when(
eye_imaged == "OS" ~ 1,
eye_imaged == "OD" ~ 2
) %>% factor(levels = c(1, 2), labels = c("Left", "Right")),
female = case_when(
sex == "F" ~ 1,
sex == "M" ~ 2
) %>% factor(levels = c(1,2), labels = c("Female", "Male")),
image_area = factor(image_area),
image_method = factor(image_method),
image_size = factor(image_size)
) %>%
# remove unnecessary variables
select(-NameSIDSexEyeRegion, -sex, -exam_time) %>%
# arrange so in appropriate order
arrange(ptid, eye_imaged, time_stamp) %>%
# create a measurement ID
mutate(eyeid = group_indices(., ptid, eye_imaged)) %>%
# deidentify names
select(-name) %>%
# reorder variables appropriately
select(ptid, female, eyeid, eye_imaged, image_area, image_size, image_method, exam_date, time_stamp, everything())
}
# create a function that removes the middle initial and titles from the names
setwd("/Volumes/GoogleDrive/My Drive/2017-2020 USC Roski Eye Institute/OCTA Repeatability - Grace Richter/Data/Jae")
data_octa_global <- read_xlsx("all_quantification_11_20_19.xlsx", sheet = "Global") %>% form_vars()
data_octa_annulus <- read_xlsx("all_quantification_11_20_19.xlsx", sheet = "Annulus") %>% form_vars()
data_octa_hemifield <- read_xlsx("all_quantification_11_20_19.xlsx", sheet = "Hemifield") %>% form_vars()
data_octa_quadrant <- read_xlsx("all_quantification_11_20_19.xlsx", sheet = "Quadrants") %>% form_vars()
data_octa_sector <- read_xlsx("all_quantification_11_20_19.xlsx", sheet = "Sector") %>% form_vars()
data_octa_clockhour <- read_xlsx("all_quantification_11_20_19.xlsx", sheet = "Clockhours") %>% form_vars()
data_octa_commercial <- read_xlsx("all_quantification_11_20_19.xlsx", sheet = "Commercial measurement") %>% form_vars()
# data_octa_commercial %>% glimpse
var_labels <- c(
ptid = "Patient Identification",
eyeid = "Eye Identification",
eye_imaged = "Eye Imaged",
time_stamp = "Exam Date and Time",
name_last = "Last Name",
name_first = "First Name",
female = "Female Sex",
image_area = "Image Area",
image_method = "Image Method",
image_size = "Image Size",
v_diameter = "Vessel Diameter (units?)",
v_area_density = "Vessel Area Density (units?)",
v_skeleton_density = "Vessel Skeleton Density (units?)",
v_perimeter_index = "Vessel Perimeter Index (units?)",
v_complexity_index = "Vessel Complexity Index (units?)",
flow_impair_zone = "Flow Impairment Zone (units?)",
flux = "Flux (units?)"
)
# assign variable labels
data_dict <-  data.frame(var_labels) %>%
rownames_to_column("Variable")
# print html table
data_dict %>%
kable(col.names = c("Variable", "Label")) %>%
kable_styling(bootstrap_options = c("striped", "hover"))
# function to rename OCTA variables
rename_octa_vars <- function(df){
df %>%
# rename variables in existing format
rename(
v_diameter = starts_with("Vessel Diameter"),
v_area_density = starts_with("Vessel Area Density"),
v_skeleton_density = starts_with("Vessel Skeleton Density"),
v_perimeter_index = starts_with("Vessel Perimeter Index"),
v_complexity_index = starts_with("Vessel Complexity Index"),
flow_impair_zone = starts_with("Flow Impiarment Zone"),
flux = starts_with("Flux")
)
}
data_octa_global_rename <- rename_octa_vars(data_octa_global)
data_octa_annulus_rename <- rename_octa_vars(data_octa_annulus)
# data_octa_hemifield_rename <- rename_octa_vars(data_octa_hemifield)
# data_octa_quadrant_rename <- rename_octa_vars(data_octa_quadrant)
# data_octa_sector_rename <- rename_octa_vars(data_octa_sector)
# data_octa_clockhour_rename <- rename_octa_vars(data_octa_clockhour)
# check out the renamed datasets
# data_octa_global_rename %>% glimpse
# data_octa_annulus_rename %>% glimpse
# commercial data had different variable names than the remaining variables
data_octa_commercial_rename <- data_octa_commercial %>%
# remove redundant commercial variables
select(-`Eye Imaged`, -EyeRegion, -SID, -Sex, -`Time stamp`, -`Date Studied`) %>%
# rename the OCTA variables
rename(
)
# data_octa_commercial_rename %>% glimpse
# match variable labels with variable names in dataframe
label(data_octa_global_rename) <- as.list(var_labels[match(names(data_octa_global_rename), names(var_labels))])
label(data_octa_annulus_rename) <- as.list(var_labels[match(names(data_octa_annulus_rename), names(var_labels))])
# label(data_octa_hemifield_rename) <- as.list(var_labels[match(names(data_octa_hemifield_rename), names(var_labels))])
# label(data_octa_quadrant_rename) <- as.list(var_labels[match(names(data_octa_quadrant_rename), names(var_labels))])
# label(data_octa_sector_rename) <- as.list(var_labels[match(names(data_octa_sector_rename), names(var_labels))])
# label(data_octa_clockhour_rename) <- as.list(var_labels[match(names(data_octa_clockhour_rename), names(var_labels))])
label(data_octa_commercial_rename) <- as.list(var_labels[match(names(data_octa_commercial_rename), names(var_labels))])
# function that gets just one eye
get_1eye <- function(df){
# set the seed so working with a consistent dataset when randomly sampling left or right eye
set.seed(123456)
# select random 1 eye per person
select_1eye <- df %>%
# get 1 eyeid
group_by(ptid, eyeid) %>% sample_n(1) %>% select(ptid, eyeid) %>% ungroup() %>%
# sample 1 eye per individual
group_by(ptid) %>% sample_n(1) %>% ungroup() %>% select(eyeid)
# subset just the eyes in the selection above
df %>%
left_join(x = select_1eye, by = "eyeid") %>% summary()
}
get_1eye(data_octa_global_rename) %>% glimpse
# function that gets just one eye
get_1eye <- function(df){
# set the seed so working with a consistent dataset when randomly sampling left or right eye
set.seed(123456)
# select random 1 eye per person
select_1eye <- df %>%
# get 1 eyeid
group_by(ptid, eyeid) %>% sample_n(1) %>% select(ptid, eyeid) %>% ungroup() %>%
# sample 1 eye per individual
group_by(ptid) %>% sample_n(1) %>% ungroup() %>% select(eyeid)
# subset just the eyes in the selection above
df %>%
left_join(x = select_1eye, by = "eyeid")
}
get_1eye(data_octa_global_rename) %>% glimpse
# Intra-Visit Data: create a dataset that selects only repeat measurements per day
data_octa_global_intra <- data_octa_global_rename %>%
# get 1 eye per person
get_1eye() %>%
# create variable that indicates when there is a repeat measurement on the same day for each eye
add_count(ptid, eye_imaged, exam_date, name = "n_msr_day") %>%
filter(n_msr_day > 1) %>%
# now that all the days with single measurements have been excluded, pick the first date with multiple measurements
group_by(ptid, eye_imaged) %>%
filter(exam_date == min(exam_date)) %>%
# create an indicator variable that shows the order of measurements
mutate(order_obs = seq(n())) %>%
ungroup() %>%
# create an indicator variable that shows the order of measurements
group_by(ptid, eye_imaged) %>%
mutate(order_obs = seq(n())) %>%
ungroup() %>% glimpse
# Intra-Visit Data: create a dataset that selects only repeat measurements per day
data_octa_global_intra <- data_octa_global_rename %>%
# get 1 eye per person
# get_1eye() %>%
# create variable that indicates when there is a repeat measurement on the same day for each eye
add_count(ptid, eye_imaged, exam_date, name = "n_msr_day") %>%
filter(n_msr_day > 1) %>%
# now that all the days with single measurements have been excluded, pick the first date with multiple measurements
group_by(ptid, eye_imaged) %>%
filter(exam_date == min(exam_date)) %>%
# create an indicator variable that shows the order of measurements
mutate(order_obs = seq(n())) %>%
ungroup() %>%
# create an indicator variable that shows the order of measurements
group_by(ptid, eye_imaged) %>%
mutate(order_obs = seq(n())) %>%
ungroup() %>% glimpse
# Intra-Visit Data: create a dataset that selects only repeat measurements per day
data_octa_global_intra <- data_octa_global_rename %>%
# get 1 eye per person
get_1eye() %>%
# create variable that indicates when there is a repeat measurement on the same day for each eye
add_count(ptid, eye_imaged, exam_date, name = "n_msr_day") %>%
filter(n_msr_day > 1) %>%
# now that all the days with single measurements have been excluded, pick the first date with multiple measurements
group_by(ptid, eye_imaged) %>%
filter(exam_date == min(exam_date)) %>%
# create an indicator variable that shows the order of measurements
mutate(order_obs = seq(n())) %>%
ungroup() %>%
# create an indicator variable that shows the order of measurements
group_by(ptid, eye_imaged) %>%
mutate(order_obs = seq(n())) %>%
ungroup() %>% glimpse
# Intra-Visit Data: create a dataset that selects only repeat measurements per day
data_octa_global_intra <- data_octa_global_rename %>%
# get 1 eye per person
get_1eye() %>%
# create variable that indicates when there is a repeat measurement on the same day for each eye
add_count(ptid, eye_imaged, exam_date, name = "n_msr_day") %>%
filter(n_msr_day > 1) %>%
# now that all the days with single measurements have been excluded, pick the first date with multiple measurements
group_by(ptid, eye_imaged) %>%
filter(exam_date == min(exam_date)) %>%
# create an indicator variable that shows the order of measurements
mutate(order_obs = seq(n())) %>%
ungroup() %>%
# create an indicator variable that shows the order of measurements
group_by(ptid, eye_imaged) %>%
mutate(order_obs = seq(n())) %>%
ungroup()
# Inter-Visit Data: create a dataset that selects the first measurement per day for each eye; there are no repeat measurements per day
data_octa_global_inter <- data_octa_global_rename %>%
# get 1 eye per person
get_1eye() %>%
group_by(ptid, eye_imaged, exam_date) %>%
top_n(n = -1, wt = time_stamp) %>%
ungroup() %>%
# create an indicator variable that shows the order of measurements
group_by(ptid, eye_imaged) %>%
mutate(order_obs = seq(n())) %>%
ungroup()
# Inter-Visit Data: create a dataset that selects the first measurement per day for each eye; there are no repeat measurements per day
data_octa_global_inter <- data_octa_global_rename %>%
# get 1 eye per person
get_1eye() %>%
group_by(ptid, eye_imaged, exam_date) %>%
top_n(n = -1, wt = time_stamp) %>%
ungroup() %>%
# create an indicator variable that shows the order of measurements
group_by(ptid, eye_imaged) %>%
mutate(order_obs = seq(n())) %>%
ungroup() %>% glimpse
