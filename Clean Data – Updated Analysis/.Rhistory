#bootstrap table classes
bootstrap_options = c("striped", "hover")
) %>%
pack_rows("Sociodemographic Variables", 2, 3) %>%
pack_rows("Systemic Clinical Variables", 4, 6) %>%
pack_rows("Diabetic Retinopathy Diagnosis", 7, 12) %>%
pack_rows("Glaucoma Suspect Diagnosis", 13, 17) %>%
pack_rows("Glaucoma Diagnosis, Ordinal", 18, 22) %>%
pack_rows("Surgical Procedure for Glaucoma", 23, 27) %>%
pack_rows("Surgical Procedure for Cataract Extraction", 28, 32) %>%
pack_rows("Image Specifications", 33, 36) %>%
pack_rows("OCT Angiography Variables", 37, 45)
}
# print_table1(data_octa_global_intra)
print_table1_people(data_octa_global_intra)
print_table1_measure(data_octa_global_intra)
print_table1_people(data_octa_global_inter)
print_table1_measure(data_octa_global_inter)
scat_octa_sid <- function(octa_var){
# select a random sample of 10 SID's
set.seed(1998)
ptid_sample10 <- data_octa_global_rename %>% dplyr::filter(eye_imaged == "Right") %>% select(ptid) %>% sample_n(10) %>% unlist() %>% as.character()
grid.arrange(ncol = 2, left = var_labels[octa_var], top = "OCTA Measures by Patient", bottom = var_labels["ptid"],
data_octa_global_intra %>%
dplyr::filter((ptid %in% ptid_sample10) & (eye_imaged == "Right")) %>%
ggplot(aes_string(x = "ptid", y = octa_var, group = "ptid")) +
geom_point(alpha = 0.1, size = 5, color = "red") +
ylim(min(data_octa_global_rename[[octa_var]]), max(data_octa_global_rename[[octa_var]])) +
ggtitle("Intra") +
ylab("") +
xlab("") +
theme(
legend.position = "none",
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 30, hjust = 1, size = 7)
),
data_octa_global_inter %>%
dplyr::filter((ptid %in% ptid_sample10) & (eye_imaged == "Right")) %>%
ggplot(aes_string(x = "ptid", y = octa_var, group = "ptid")) +
geom_point(alpha = 0.1, size = 5, color = "blue") +
ylim(min(data_octa_global_rename[[octa_var]]), max(data_octa_global_rename[[octa_var]])) +
ggtitle("Inter") +
ylab("") +
xlab("") +
theme(
legend.position = "none",
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 30, hjust = 1, size = 7)
)
)
}
# scat_octa_sid("v_area_density")
# data_octa_global_rename %>% glimpse
scat_octa_sid("v_area_density")
scat_octa_sid("zeiss_v_area_density")
scat_octa_sid("v_diameter")
scat_octa_sid("v_skeleton_density")
scat_octa_sid("v_perimeter_index")
scat_octa_sid("v_complexity_index")
scat_octa_sid("flow_impair_zone")
scat_octa_sid("flux")
scat_octa_sid("zeiss_flux")
spaghet_plot <- function(octa_var){
# select a random sample of 10 patients
set.seed(2448)
ptid_sample10 <- data_octa_global_rename %>% dplyr::filter(eye_imaged == "Right") %>% select(ptid) %>% sample_n(10) %>% unlist() %>% as.character()
grid.arrange(ncol = 2, left = var_labels[octa_var], top = "OCTA Measures Over Time", bottom = var_labels["time_stamp"],
data_octa_global_intra %>%
dplyr::filter((ptid %in% ptid_sample10) & (eye_imaged == "Right")) %>%
ggplot(aes_string(x = "time_stamp", y = octa_var, group = "ptid")) +
geom_line(alpha = 0.5, size = 1, color = "red") +
theme(legend.position = "none") +
ylim(min(data_octa_global_rename[[octa_var]]), max(data_octa_global_rename[[octa_var]])) +
ggtitle("Intra") +
ylab("") +
xlab("") +
theme(
legend.position = "none",
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 30, hjust = 1, size = 7)
),
data_octa_global_inter %>%
dplyr::filter((ptid %in% ptid_sample10) & (eye_imaged == "Right")) %>%
ggplot(aes_string(x = "time_stamp", y = octa_var, group = "ptid")) +
geom_line(alpha = 0.5, size = 1, color = "blue") +
theme(legend.position = "none") +
ylim(min(data_octa_global_rename[[octa_var]]), max(data_octa_global_rename[[octa_var]])) +
ggtitle("Inter") +
ylab("") +
xlab("") +
theme(
legend.position = "none",
plot.title = element_text(hjust = 0.5),
axis.text.x = element_text(angle = 30, hjust = 1, size = 7)
)
)
}
# spaghet_plot("v_area_density")
spaghet_plot("v_area_density")
spaghet_plot("zeiss_v_area_density")
spaghet_plot("v_diameter")
spaghet_plot("v_skeleton_density")
spaghet_plot("v_perimeter_index")
spaghet_plot("v_complexity_index")
spaghet_plot("flow_impair_zone")
spaghet_plot("flux")
spaghet_plot("zeiss_flux")
# function that gets repeatability statistics
get_blandaltman <- function(df, octa_var){
# make OCTA variable name
octa_name <- var_labels[as.character(octa_var)]
# intra-visit dataset
data_blandalt <- df %>%
# select only the measurement ID and the OCTA variable of interest
select(ptid, eye_imaged, order_obs, eyeid, !!octa_var) %>%
# only select the first 2 measurements
filter(order_obs <= 2) %>%
group_by(ptid, eye_imaged) %>%
# calculate the difference and mean of measurements for each individual eye
mutate(
diff = diff(!!octa_var),
mean = mean(!!octa_var)
) %>% ungroup() %>%
select(!!octa_var, everything())
p_blandalt <- data_blandalt %>%
ggplot(aes(x = mean, y = diff)) +
scale_y_continuous(limits = c(-max(data_blandalt$diff)*1.5, max(data_blandalt$diff)*1.5)) +
geom_point(size = 0.6, alpha = 0.9) +
geom_hline(yintercept = mean(data_blandalt$diff), colour = "blue", size = 0.5, linetype = 2) +
geom_hline(yintercept = mean(data_blandalt$diff) - (1.96 * sd(data_blandalt$diff)), colour = "red", size = 0.5, linetype = 2) +
geom_hline(yintercept = mean(data_blandalt$diff) + (1.96 * sd(data_blandalt$diff)), colour = "red", size = 0.5, linetype = 2) +
geom_text(aes(label = ifelse(
diff >  mean(data_blandalt$diff) + (1.96 * sd(data_blandalt$diff)) |
diff <  mean(data_blandalt$diff) - (1.96 * sd(data_blandalt$diff)),
yes = as.character(eyeid), no = ''
)), hjust = 0, vjust = 0, color = "darkgray", size = 3) +
ggtitle("") +
ylab("Difference in Measurements") +
xlab("Average Measurements")
p_diffdist <- data_blandalt %>%
ggplot(aes(x = diff)) +
geom_vline(xintercept = mean(data_blandalt$diff), colour = "blue", size = 0.5, linetype = 2) +
geom_vline(xintercept = mean(data_blandalt$diff) - (1.96 * sd(data_blandalt$diff)), colour = "red", size = 0.5, linetype = 2) +
geom_vline(xintercept = mean(data_blandalt$diff) + (1.96 * sd(data_blandalt$diff)), colour = "red", size = 0.5, linetype = 2) +
geom_histogram(bins = 30, alpha = 0.9) +
geom_text(aes(label = ifelse(
diff >  mean(data_blandalt$diff) + (1.96 * sd(data_blandalt$diff)) |
diff <  mean(data_blandalt$diff) - (1.96 * sd(data_blandalt$diff)),
yes = as.character(eyeid), no = ''
), y = 6), hjust = 0, vjust = 0, color = "darkgray", size = 3) +
scale_y_continuous(limits = c(0, 200), breaks = seq(0,200,50)) +
scale_x_continuous(limits = c(-max(data_blandalt$diff)*1.5, max(data_blandalt$diff)*1.5)) +
ggtitle("") +
xlab("Difference in Measurements")
grid.arrange(ncol = 2, top = textGrob(octa_name), p_blandalt, p_diffdist)
}
# get_blandaltman(df = data_octa_global_intra, octa_var = quo(v_area_density))
get_blandaltman(df = data_octa_global_intra, octa_var = quo(v_area_density))
get_blandaltman(df = data_octa_global_intra, octa_var = quo(zeiss_v_area_density))
get_blandaltman(df = data_octa_global_intra, octa_var = quo(v_diameter))
get_blandaltman(df = data_octa_global_intra, octa_var = quo(v_skeleton_density))
get_blandaltman(df = data_octa_global_intra, octa_var = quo(v_perimeter_index))
get_blandaltman(df = data_octa_global_intra, octa_var = quo(v_complexity_index))
get_blandaltman(df = data_octa_global_intra, octa_var = quo(flow_impair_zone))
get_blandaltman(df = data_octa_global_intra, octa_var = quo(flux))
get_blandaltman(df = data_octa_global_intra, octa_var = quo(zeiss_flux))
data_octa_global_intra %>%
filter(eyeid %in% c(27, 66)) %>%
kable(digits = 3) %>%
kable_styling(
#bootstrap table classes
bootstrap_options = c( "hover")
)
get_blandaltman(df = data_octa_global_inter, octa_var = quo(v_area_density))
get_blandaltman(df = data_octa_global_inter, octa_var = quo(zeiss_v_area_density))
get_blandaltman(df = data_octa_global_inter, octa_var = quo(v_diameter))
get_blandaltman(df = data_octa_global_inter, octa_var = quo(v_skeleton_density))
get_blandaltman(df = data_octa_global_inter, octa_var = quo(v_perimeter_index))
get_blandaltman(df = data_octa_global_inter, octa_var = quo(v_complexity_index))
get_blandaltman(df = data_octa_global_inter, octa_var = quo(flow_impair_zone))
get_blandaltman(df = data_octa_global_inter, octa_var = quo(flux))
get_blandaltman(df = data_octa_global_inter, octa_var = quo(zeiss_flux))
data_octa_global_inter %>%
filter(eyeid %in% c(27, 66)) %>%
kable(digits = 3) %>%
kable_styling(
#bootstrap table classes
bootstrap_options = c( "hover")
)
# I tried to calculate the Sw manually and by using the one-way anova table, as instructed in Bland (1996). However, the two methods are producing different answers for Sw. Therefore, try to use the data in the paper to recalculate Sw for the sample data provided.
# after rechecking, it turns out my calculations were correct, but it's just the rounding errors combined with squaring and square-rooting to go from standard deviation to variance that caused the differences.
# data copied from Bland (1996)
df_bland96 <- matrix(c(190, 220, 200, 200, 202.50, 12.58, 220, 200, 240, 230, 222.50, 17.08, 260, 260, 240, 280, 260.00, 16.33, 210, 300, 280, 265, 263.75, 38.60, 270, 265, 280, 270, 271.25, 6.29, 280, 280, 270, 275, 276.25, 4.79, 260, 280, 280, 300, 280.00, 16.33, 275, 275, 275, 305, 282.50, 15.00, 280, 290, 300, 290, 290.00, 8.16, 320, 290, 300, 290, 300.00, 14.14, 300, 300, 310, 300, 302.50, 5.00, 270, 250, 330, 370, 305.00, 55.08, 320, 330, 330, 330, 327.50, 5.00, 335, 320, 335, 375, 341.25, 23.58, 350, 320, 340, 365, 343.75, 18.87, 360, 320, 350, 345, 343.75, 17.02, 330, 340, 380, 390, 360.00, 29.44, 335, 385, 360, 370, 362.50, 21.02, 400, 420, 425, 420, 416.25, 11.09, 430, 460, 480, 470, 460.00, 21.60), ncol = 6, byrow = T, dimnames = list(c(), c("1st", "2nd", "3rd", "4th", "Mean", "SD"))) %>%
# convert to dataframe
as.data.frame() %>%
# make a column of children ID
mutate(children = seq(1:20)) %>% select(children, everything())
# calculate the values manually
df_bland96 %>%
# take the average of mean measurements and the average of the variances
summarise(
Xw = mean(Mean),
Sw = sqrt(mean(SD^2))
) %>%
# square root the variances
mutate(
CRw = sqrt(2)*1.96*Sw,
CVw = 100*Sw/Xw
)
df_bland96 %>%
select(children, `1st`, `2nd`, `3rd`, `4th`) %>% mutate(children = factor(children)) %>%
gather(key = measurement, value = value, -children) %>%
# select only the eye ID, the eye ID, and the OCTA variable of interest
aov(formula = value ~ children)
# function that gets repeatability statistics
get_repeatability <- function(df, octa_var){
trim3 <- function(x){sprintf("%.3f", round(x, 3))}
# make OCTA variable name
octa_name <- var_labels[as.character(octa_var)][[2]]
# intra-visit dataset
df %>%
# select only the measurement ID and the OCTA variable of interest
select(ptid, eyeid, eye_imaged, order_obs, !!octa_var) %>%
# group by measurement ID
group_by(eyeid) %>%
# calculate the mean and variance of measurements for each individual
mutate(
mean = base::mean(!!octa_var),
var = stats::sd(!!octa_var)^2
) %>%
# remove grouping by measurement ID
ungroup() %>%
# take the average of mean measurements and the average of the variances
summarise(
n = n(),
µ = mean(mean),
Sw = sqrt(mean(var)),
se_var = sd(var)/sqrt(n()),
sw_95l = Sw - 1.96*se_var,
sw_95u = Sw + 1.96*se_var
) %>%
# square root the variances
mutate(
CRw = sqrt(2)*1.96*Sw,
CRw_95l = sqrt(2)*1.96*sw_95l,
CRw_95u = sqrt(2)*1.96*sw_95u,
CVw = 100*Sw/µ,
CVw_95l = 100*sw_95l/µ,
CVw_95u = 100*sw_95u/µ,
var_name = octa_name
) %>%
# make the variables pretty\
mutate(
Sw_pretty = paste0(trim3(Sw), " (", trim3(sw_95l), ", ", trim3(sw_95u), ")"),
CRw_pretty = paste0(trim3(CRw), " (", trim3(CRw_95l), ", ", trim3(CRw_95u), ")"),
CVw_pretty = paste0(trim3(CVw), " (", trim3(CVw_95l), ", ", trim3(CVw_95u), ")")
) %>%
# remove ugly variables
select(
-Sw, -se_var, -sw_95l, -sw_95u,
-CRw, -CRw_95l, -CRw_95u,
-CVw, -CVw_95l, -CVw_95u
) %>%
select(var_name, everything())
}
get_repeat_table <- function(df_table){
# call repeatability statistics on each measurement, then make into a table
get_repeatability(df = df_table, octa_var = quo(v_diameter)) %>%
rbind(
get_repeatability(df = df_table, octa_var = quo(v_area_density)),
get_repeatability(df = df_table, octa_var = quo(zeiss_v_area_density)),
get_repeatability(df = df_table, octa_var = quo(v_skeleton_density)),
get_repeatability(df = df_table, octa_var = quo(v_perimeter_index)),
get_repeatability(df = df_table, octa_var = quo(v_complexity_index)),
get_repeatability(df = df_table, octa_var = quo(flow_impair_zone)),
get_repeatability(df = df_table, octa_var = quo(flux)),
get_repeatability(df = df_table, octa_var = quo(zeiss_flux))
) %>%
# make html "kable" and round digits
kable(digits = 3, col.names = c("OCTA Variable", "n", "µ", "Sw", "CRw", "CVw")) %>%
kable_styling(
#bootstrap table classes
bootstrap_options = c( "hover")
)
}
data_octa_global_intra %>%
filter(glc_dx_bin == "Normal") %>%
get_repeat_table()
data_octa_global_intra %>%
filter(glc_dx_bin == "Glaucoma") %>%
get_repeat_table()
# function that produces a kable output for internal datasets
icc_tabulate <- function(df){
library(ICC)
# function that calls ICC function, adds a column to front with variable name
icc_that <- function(df, var){
c(var, ICCest(ptid, var, data = df))
}
# call the ICC function on each OCTA variable, then r bind into a table
rbind(
icc_that(df, "v_diameter"),
icc_that(df, "v_area_density"),
icc_that(df, "zeiss_v_area_density"),
icc_that(df, "v_skeleton_density"),
icc_that(df, "v_perimeter_index"),
icc_that(df, "v_complexity_index"),
icc_that(df, "flow_impair_zone"),
icc_that(df, "flux"),
icc_that(df, "zeiss_flux")
) %>% as.data.frame() %>%
# round columns
mutate(
ICC = as.double(ICC),
LowerCI = as.double(LowerCI),
UpperCI = as.double(UpperCI),
k = as.double(k),
varw = as.double(varw),
vara = as.double(vara)
) %>%
# call kable
kable(digit = 3) %>%
#bootstrap table classes
kable_styling(bootstrap_options = c("striped", "hover"))
}
# function that produces a kable output for commercial datasets
icc_tabulate_comm <- function(df){
library(ICC)
# function that calls ICC function, adds a column to front with variable name
icc_that <- function(df, var){
c(var, ICCest(eyeid, var, data = df))
}
# call the ICC function on each OCTA variable, then r bind into a table
rbind(
icc_that(df, "zeiss_v_area_density"),
icc_that(df, "zeiss_flux")
) %>% as.data.frame() %>%
# round columns
mutate(
ICC = as.double(ICC),
LowerCI = as.double(LowerCI),
UpperCI = as.double(UpperCI),
k = as.double(k),
varw = as.double(varw),
vara = as.double(vara)
) %>%
# call kable
kable(digit = 3) %>%
#bootstrap table classes
kable_styling(bootstrap_options = c("striped", "hover"))
}
data_octa_global_intra %>% gl
# function that produces a kable output for internal datasets
icc_tabulate <- function(df){
library(ICC)
# function that calls ICC function, adds a column to front with variable name
icc_that <- function(df, var){
c(var, ICCest(ptid, var, data = df))
}
# call the ICC function on each OCTA variable, then r bind into a table
rbind(
icc_that(df, "v_diameter"),
icc_that(df, "v_area_density"),
icc_that(df, "zeiss_v_area_density"),
icc_that(df, "v_skeleton_density"),
icc_that(df, "v_perimeter_index"),
icc_that(df, "v_complexity_index"),
icc_that(df, "flow_impair_zone"),
icc_that(df, "flux"),
icc_that(df, "zeiss_flux")
) %>% as.data.frame() %>%
# round columns
mutate(
ICC = as.double(ICC),
LowerCI = as.double(LowerCI),
UpperCI = as.double(UpperCI),
k = as.double(k),
varw = as.double(varw),
vara = as.double(vara)
) %>%
# call kable
kable(digit = 3) %>%
#bootstrap table classes
kable_styling(bootstrap_options = c("striped", "hover"))
}
# function that produces a kable output for commercial datasets
icc_tabulate_comm <- function(df){
library(ICC)
# function that calls ICC function, adds a column to front with variable name
icc_that <- function(df, var){
c(var, ICCest(ptid, var, data = df))
}
# call the ICC function on each OCTA variable, then r bind into a table
rbind(
icc_that(df, "zeiss_v_area_density"),
icc_that(df, "zeiss_flux")
) %>% as.data.frame() %>%
# round columns
mutate(
ICC = as.double(ICC),
LowerCI = as.double(LowerCI),
UpperCI = as.double(UpperCI),
k = as.double(k),
varw = as.double(varw),
vara = as.double(vara)
) %>%
# call kable
kable(digit = 3) %>%
#bootstrap table classes
kable_styling(bootstrap_options = c("striped", "hover"))
}
data_octa_global_intra %>% gl
data_octa_global_intra %>%
filter(glc_dx_bin == "Normal") %>%
icc_tabulate()
# function that produces a kable output for internal datasets
icc_tabulate <- function(df){
library(ICC)
# function that calls ICC function, adds a column to front with variable name
icc_that <- function(df, var){
c(var, ICCest(ptid, var, data = df))
}
# call the ICC function on each OCTA variable, then r bind into a table
rbind(
icc_that(df, "v_diameter"),
icc_that(df, "v_area_density"),
icc_that(df, "zeiss_v_area_density"),
icc_that(df, "v_skeleton_density"),
icc_that(df, "v_perimeter_index"),
icc_that(df, "v_complexity_index"),
icc_that(df, "flow_impair_zone"),
icc_that(df, "flux"),
icc_that(df, "zeiss_flux")
) %>% as.data.frame() %>%
# round columns
mutate(
ICC = as.double(ICC),
LowerCI = as.double(LowerCI),
UpperCI = as.double(UpperCI),
k = as.double(k),
varw = as.double(varw),
vara = as.double(vara)
) %>%
# call kable
kable(digit = 3) %>%
#bootstrap table classes
kable_styling(bootstrap_options = c("striped", "hover"))
}
# function that produces a kable output for commercial datasets
icc_tabulate_comm <- function(df){
library(ICC)
# function that calls ICC function, adds a column to front with variable name
icc_that <- function(df, var){
c(var, ICCest(eyeid, var, data = df))
}
# call the ICC function on each OCTA variable, then r bind into a table
rbind(
icc_that(df, "zeiss_v_area_density"),
icc_that(df, "zeiss_flux")
) %>% as.data.frame() %>%
# round columns
mutate(
ICC = as.double(ICC),
LowerCI = as.double(LowerCI),
UpperCI = as.double(UpperCI),
k = as.double(k),
varw = as.double(varw),
vara = as.double(vara)
) %>%
# call kable
kable(digit = 3) %>%
#bootstrap table classes
kable_styling(bootstrap_options = c("striped", "hover"))
}
data_octa_global_intra %>%
filter(glc_dx_bin == "Normal") %>%
icc_tabulate()
# function that produces a kable output for internal datasets
icc_tabulate <- function(df){
library(ICC)
# function that calls ICC function, adds a column to front with variable name
icc_that <- function(df, var){
c(var, ICCest(eyeid, var, data = df))
}
# call the ICC function on each OCTA variable, then r bind into a table
rbind(
icc_that(df, "v_diameter"),
icc_that(df, "v_area_density"),
icc_that(df, "zeiss_v_area_density"),
icc_that(df, "v_skeleton_density"),
icc_that(df, "v_perimeter_index"),
icc_that(df, "v_complexity_index"),
icc_that(df, "flow_impair_zone"),
icc_that(df, "flux"),
icc_that(df, "zeiss_flux")
) %>% as.data.frame() %>%
# round columns
mutate(
ICC = as.double(ICC),
LowerCI = as.double(LowerCI),
UpperCI = as.double(UpperCI),
k = as.double(k),
varw = as.double(varw),
vara = as.double(vara)
) %>%
# call kable
kable(digit = 3) %>%
#bootstrap table classes
kable_styling(bootstrap_options = c("striped", "hover"))
}
data_octa_global_intra %>%
filter(glc_dx_bin == "Normal") %>%
icc_tabulate()
